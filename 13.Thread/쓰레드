프로그램 실행의 흐름: 쓰레드
하나의 프로세스가 둘 이상의 실행흐름을 작는 프로그램: 멀티쓰레드 프로그램
main() 메소드는 자동실행 . 
다른 쓰레드는 자동실행되지 않고, main() 메소드에서 다른 쓰레드를 실행시켜준다
쓰레드들은 동등한 레벨이고 main 쓰레드가 종료되더라도 
실행되어진 각각의 쓰레드들이 모두 끝나야만 최종적으로 프로그램이 끝난다

멀티쓰레드 프로그램 작성하기
1. 동시에 진행할 작업을 준비한다
2. 쓰레드를 만든다 - Thread 클래스 상속받기, Runnable 인터페이스 구현하기 
3. 쓰레드 처리 내용을 구현한다 - public void run(){  ....  }
4. 쓰레드가 실행되도록 시작시킨다. - main() 에서 start() 로 쓰레드를 실행시킨다

멀티쓰레드 프로그램에서 쓰레드간에 공유해야 할 데이터가 있는 경우

PiThread  가 계산을 다 마친후에  PrintThread   에게 알려주자

임계영역( critical section)
:동시에 접근해서는 안되는 공유자원을 둘 이상의 쓰레드가 접근하는 코드의 일부
먼저 실행의 제어권을 가져간 쓰레드가 임계영역을 실행중에는 
다른 쓰레드가 접근하지 못하게 제한을 한다 
- 임계영역의 동기화(critical section synchronization)

동기화: synchronized  처리
동기화블럭: 동기화대상(공유영역객체)에 대해 synchronized처리
동기화메소드



1. Thread 클래스를 상속받는다 : 쓰레드클래스 extends Thread
2. Thread 가 갖고 있는  run() 메소드가 실행이 되어질 부분의 메소드
   : run() 메소드 오버라이딩하기
   public void run(){
   	.......
   	처리할 로직을 작성한다
   }
3. 쓰레드클래스 는 main 에서 쓰레드를 실행시켜줘야 한다
  	쓰레드 객체를 생성한 후 실행 시킨다
  	공유영역정보를 사용하는 경우는 공유영역 객체를 생성한 후
  	각 쓰레드클래스 생성시  공유영역객체를 생성자 파라미터로 한다
     쓰레드클래스  참조변수 = new 쓰레드클래스(공유영역 객체);
  	참조변수.start();
  	  
    
쓰레드의 상태
객체생성시 쓰레드가 생성되고
start() 메소드에 의해 실행되고 
처리가 다 끝나면 종료되는 라이프 사이클(생명주기)

static enum 타입으로 선언되어 있는 상태
new 쓰레드 로 객체 생성된 상태: NEW
start() 이후 실행중, 실행가능한 실행준비상태: RUNNABLE
- sleep 일정시간 대기하는 상태: TIMED_WAITING
- wait 신호가 오기를 기다리는 상태: WAITING
- 동기화 처리에 의해 접근이 제한되어 대기하는 상태: BLOCKED
쓰레드가 종료된 상태: TERMINATED


 
    
    
    
    

















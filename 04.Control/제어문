※ 조건문
1. if문
1) if( 조건식 ){	 조건식의 결과가 true 이면 if블럭{} 내의 모든 명령문들을 실행한다
		명령문들
	}
	
2) if( 조건식 ){		조건식의 결과가  true 이면 if블럭 내의 명령문들을 실행하고,
		명령문들1						false 이면 else 블럭 내의 명령문들을 실행한다
	}else {
		명령문들2
	}

3) if( 조건식1 ){			조건식1의 결과가 true이면 명령문들1 을 실행하고 
		명령문들1				아니면 조건식2의 결과가  true이면 명령문들2 을 실행하고
	}else if( 조건식2 ){	아니면 조건식3의 결과가  true이면 명령문들3 을 실행하고
		명령문들2				아니면 명령문들4 를 실행
	}else if( 조건식3 ){
		명령문들3
	}else if( 조건식4 ){
		명령문들4
	}
	
	if( 조건식1 ){		 
		명령문들1			
	}else if( 조건식2 ){
		명령문들2			
	}else if( 조건식3 ){
		명령문들3
	}else {
		명령문들4
	}
	
	판단한 조건식이 true 인 첫번째 블럭의 명령문들을 실행하고 if 문을 빠져나온다
	if블럭, else if 블럭,  else 블럭 내의 실행명령문이 한 개이면 { } 생략 가능

변수의 유효범위
변수가 선언된 블럭{} 내에서만 사용 가능
선언된 블럭{} 을 벗어나면 사용 불가 : 메모리에서 사라지기 때문에


직접코드실습
1. 키보드로 입력한 정수에 대해 양의 정수, 음의 정수, 0 를 출력하는 프로그램을 작성하세요.

2. 키보드로 입력한 시험성적에 따라 학점을 출력하는 프로그램을 작성하세요.
   90점 이상 A학점, 80점 이상 B학점, 70점 이상 C학점, 60점 이상 D학점 그 외는 F학점.
     이 때 학점은 char 타입의 변수를 선언하고, 해당 변수에 학점을 대입하도록 한다.
     출력예) 73 점은 C학점.
     
3. 2번 프로그램에 연결해서
      학점에 대해 상중하 레벨을 출력하는 프로그램을 작성하세요.
   A, B 학점은 상      
   C, D 학점은 중
     그 외는 하 로 출력한다.
     출력예) B 학점은 레벨 상          


2. switch ~ case 문
2.1 --> 2.
판단기준인 데이터 : 문자, 문자열, 정수(long제외)
switch( 판단기준인 데이터값 ){
	case  동등비교데이터값1 :
			실행명령문들1
			break;
	case  동등비교데이터값2 :
			실행명령문들2
			break;
	case  동등비교데이터값3 :
			실행명령문들3
			break;
	default:  //if문에서의  else에 해당
			실행명령문들4
			break;
}

※ 반복문
일정한 작업을 규칙적으로 반복 실행할 때
똑같은 명령문들을 여러 번 작성하지 않고 반복문을 사용한다.
1. while 문
초기화식
while( 조건식 ) { 조건식의 결과가 true 인 동아 명령문을 반복해서 실행
	실행명령문들        조건식의 결과가  false 되어 반복문을 빠져나갈 수 있도록 해야 한다
	조건변경문         
}

2. do ~ while 문
초기화식
do{
	실행명령문
	조건변경문
}while( 조건식 );

3. for문
for(초기화식; 조건식; 조건변경식 ){
	실행명령문
}


중첩반복문: 반복문 안에 반복문이 들어가 있는 형태
for( 초기화식1; 조건식1; 조건변경식1 ){
	for(초기화식2; 조건식2; 조건변경식2){
	}
}
for( 초기화식1; 조건식1; 조건변경식1 ){
	초기화식2
	while(조건식2 ){
		조건변경식2
	}
}

초기화식1
while(조건식1 ){
	for( 초기화식1; 조건식1; 조건변경식1 ){
		 실행명령문1
	}
	실행명령문2
	조건변경식1
}



반복문 처리 도중에 반복문을 빠져나가려면 break 문을 사용한다
반복문 실행중에 실행처리를 하지 않고 
다음 반복반복으로 넘어가도록 하려면  continue 문을 사용한다


※ 배열
똑같은 데이터타입의 데이터를 담기 위한 변수가 여러개 필요한 경우
그 사용 목적이 비슷하면 하나의 변수로 선언하여 여러개의 데이터를 모두 저장하여 사용.

반복문으로 배열변수의 각 요소에  데이터를 담으려면  
일반적인 for문으로 인덱스를 통해 데이터를 담는다.
반복문으로 배열변수에 담겨진 데이터에의 접근하려면
일반적인 for문 뿐 아니라 향상된 for문으로 접근할 수 있다.

향상된 for문
: 배열 요소의 수만큼 반복 실행하면서 
   각 배열요소의 값이 새로운 변수에 자동으로 담겨지게 된다.
  새로운 변수로 데이터를 접근하고 인덱스로는 접근할 수 없다
    
for( 인덱스초기값;  배열변수의 길이; ++){
	배열변수[인덱스] = 데이터값;
	출력문( 배열변수[인덱스] );
}

for( 새로운 변수선언 : 배열변수 ){
}

다차원배열 - 주로 2차원 배열까지 사용
배열선언문: 데이터타입 배열변수;
int no[][];
int[][] no;

배열생성문:  new 데이터타입[행갯수][열갯수];
no = new int[5][3];
















	
Collection<E>  인터페이스를 구현하고 있는 클래스 :  Generic 클래스

List<E>	  			Set<E>			Queue<E>		Map<K, V>		
	
ArrayList			HashSet							HashMap			
LinkedList 

Generic : 자료구조
여러 데이터타입을 모아둔 데이터 그룹
데이터검색, 추가, 삭제, 변경 가능한 논리적 구조
코드의 중복을 피하는 구현의 편의, 데이터타입에 대해 안정성을 보장받을 수 있는 제네릭을 사용한다
제네릭 프로그래밍 : 여러 참조타입을 사용할 수 있도록 프로그래밍하는 것

자료구조: 레퍼런스타입만 저장할 수 있다
어떤 타입의 데이터를 저장할 것인지를 객체생성시에 타입파라미터<>로 지정한다.


1. List - ArrayList, LinkedList
데이터저장 add()
데이터변경 set()
데이터삭제 remove()
데이터조회 get(인덱)
1) ArrayList
	객체생성시 기본 10개의 데이터를 저장할 수 있는 저장공간을 배열로 확보
	- 순차적으로 데이터가 저장된다. : 순서가 유지된다
	- 삽입저장 하면 인덱스의 재설정이 있다. : 내부적 처리로 속도가 떨어진다
	- 삭제 하면 인덱스의 재설정이 있다. : 내부적 처리로 속도가 떨어진다
	- 이미 확보된 영역보다 더 많은 데이터를 저장하게 되면 새로운 영역을 확보한뒤
	   원래 데이터를 복사해서 넣는 과정이 있어 속도가 떨어진다
	   
데이터 추가, 삽입, 삭제 형태가 빈번한 경우에는 사용하지 적합치 않다
데이터를 한번만 저장하고 주로 조회하는 경우에 사용한다
	   
2) LinkedList
	사용방법은 ArrayList 와 같다
	내부적인 관리형태는 다르다
	- 저장시 앞뒤 데이터간에 관계(link) 를 맺는다
	- 삽입저장 시 기존 link를 끊고 새로운  link 를 맺는다
	- 삭제시 기존  link를 끊고 새로운  link 를 맺는다
		
데이터 추가, 삽입, 삭제 형태가 빈번한 경우에는 사용하고
데이터를 주로 조회하는 경우에는 처리속도가 떨어진다



2. HashMap
데이터를 분류할 기준을 정하고 데이터를 담을 상자에 번호를 부여해 둔다
키와 함께 데이터를 저장한다 - 키는 중복을 허용하지 않는다 : put()
키로 데이터를 찾는다 : get()
내부적으로 상자의 번호를 계산하고(hashCode()메소드), 
해당 상자에 담긴 데이터들 중에 키가 일치하는 경우(equals()메소드) 데이터를 꺼내온다
- 효율적인 검색에 사용한다
HashMap<Key, Value>
데이터저장: put()
데이터삭제: remove()
데이터조회: get(Key)
 
3. HashSet
집합 A = { 1,2,3 } B= { 2,3,4 }
합집합 A u B = { 1,2,3,4 }  A u B = { 2,4,1,3 }
같은 원소를 중복해서 표시하지 않는다
순서가 유지되지 않는다

집합의 성격을 그대로 갖고 있는 자료구조
데이터분류의 기준을 갖고 있어 16개의 상자중에 하나에 저장이 되는 형태










	
	
	
자료구조로 프리미티브타입을 저장하려면 Wrapper 클래스를 사용해야 한다.
byte -> Byte
short -> Short
int -> Integer
long -> Long
float -> Float
double -> Double
char -> Character
boolean -> Boolean






 

	
	
	
	
	
	
	
	
	
	
	
	








클래스 선언에서
중복된 구성요소를 공통점으로 보고
클래스 로 선언한다.
학생정보						직장인
이름, 나이, 학번			이름, 나이, 사번
먹는다						먹는다
잠을 잔다					잠을 잔다
등교한다 					출근한다

사람
이름, 나이
먹는다
잠을 잔다	 

기존의 클래스 를 그대로 유지하면서
확장한 형태의 재사용이 가능한 형태: 상속

상속 : 부모 -> 자식
상속해줄 부모클래스, 상위클래스, super클래스
상속받을 자식클래스, 하위클래스, sub클래스

상속은 extends 키워드를 사용한다
class 자식클래스명 extends  부모클래스 {

}

상속받게되면 서브클래스는 수퍼클래스의 모든 구성요소를 갖게 된다
동물
품종
먹는다
잠을잔다

개                                     새
품종                                  품종
먹는다                               먹는다       
잠을잔다                            잠을잔다
땅위를 달린다                      하늘을 난다

수퍼클래스: 동물클래스 - 필드,메소드
서브클래스: 개클래스 , 새클래스 - 필드,메소드
실행프로그램에서 객체를 생성해서 메소드를 호출한다


final 클래스는 상속을 금지하는 것
final 메소드는 메소드오버라이딩을 금지하는 것

추상화
abstract : 객체생성을 금지하는 키워드
abstract class 클래스명 {}  : 객체생성(인스턴스화) 불가
new 클래스명(); <- 문법상 오류

abstract class(추상클래스)는 상속을 강제하고 있다

추상메소드 는 구체적으로 구현할 수 있는 메소드의 본체 {} 가 없이 ; 로 선언한 형태
abstract  리턴타입 메소드명();

클래스내에 추상메소드가 선언된 클래스 역시 추상화가 된다.
추상클래스로 선언해야 한다.
abstract class 클래스명{} 

추상메소드로 인해 추상화가 되어진 서브클래스에 대해 구체화(객체생성)할 수 있도록
추상화를 벗어나려면 추상메소드를 오버라이딩해서 구체화되도록 해야 한다.

추상메소드는 오버라이딩을 강제한다
추상클래스는 상속을 강제한다

이메일로 메시지를 보내는 클래스
제목
발송자이름
발송자 이메일주소
메시지내용
메시지를 보낸다

문자로 메시지를 보내는 클래스
제목
발송자이름
발송자 전화번호
메시지내용
메시지를 보낸다

메시지발송 클래스
제목
발송자이름
메시지내용
메시지를 보낸다

직접코드 실습

직각삼각형
밑변, 높이
넓이를 구한다

직사각형
너비, 높이
넓이를 구한다

1. 수퍼클래스인 Shape 클래스, 서브클래스인 Rectangle, RightTriangle를 선언
2. main 이 있는 실행프로그램 클래스를 선언해서
   직각삼각형 객체와 직사각형 객체를 생성한 후
    각 도형의 넓이를 출력한다.
    
    
접근제한자(접근제어자) : 접근의 허용 범위를 정해주는 것
public > protected > default > private

클래스 에 지정가능한 접근제한자 :  public, default
클래스의 구성요소(멤버): 필드,메소드,생성자 에는 4가지를 지정할 수 있다

private : 선언된 클래스 내에서만 접근 가능
default : 같은 패키지 내의 모든 클래스 접근 가능 - 특정 접근제어자가 없으면 default
procted : 같은 패키지 내의 모든 클래스 접근 가능
          + 다른 패키지의 상속받은 서브클래스 접근 가능
public : 같은 패키지 내의 모든 클래스 접근 가능
                 다른 패키지 내의 모든 클래스 접근 가능 

접근제한자(접근제어자) 지정하는 이유 : 정보은닉(객체지향에서의 캡슐화)
- 데이터를 보호하기 위해
- 내부적으로 사용되고 외부에는 불필요한 구성요소들을 감추기 위해서
 
 
포유류: 개과, 고양이과, 원숭이과 ,... 
개과: 발끝으로 걷는 특성을 갖는다 - 개, 늑대, 여우, ...
늑대: 늑대만의 특성을 갖는다

늑대는 늑대, 늑대는 개과, 늑대는 포유류 라고 표현할 수 있다

class 포유류
class 개과 extends 포유류
class 늑대 extends 개과

객체생성의 표현
포유류 mammal1 = new 포유류(); - 포유류객체는 포유류 형태
개과 dog1 = new 개과();       - 개과 객체는 개과 형태
늑대 wolf1 = new 늑대();      - 늑대 객체는 늑대 형태

늑대는 개과, 늑대는 포유류
개과  wolf2 = new 늑대();    - 늑대 객체는 개과 형태
포유류 mammal2 = new 늑대(); - 늑대 객체는 포유류 형태
포유류  mammal3 = new 개과(); - 개과 객체는 포유류 형태

상속관계가 있을때 서브클래스 객체는 수퍼클래스의 타입으로 표현할 수 있다
: 다형성(polymorphism)

개과는 늑대형태 라고 표현할 수 없다
포유류는 늑대형태라고 표현할 수 없다

다형성의 표현으로 수퍼클래스의 타입으로 서브클래스 객체를 표현한 경우
오버라이딩 된 메소드를 호출하면 
1. 수퍼클래스에 해당 메소드가 선언되어 있는지 확인
2. 선언되어 있다면 서브클래스에 메소드 선언되어 있는지 확인해서
               서브클래스에 메소드 선언되어 있으면 서브클래스의 메소드가 호출된다
3. 서브클래스에 메소드 선언되어 있지 않으으면 수퍼클래스의 메소드가 호출된다                


정규직 직원                  비정규직 직원                 일용직 직원
사번						사번 					사번 
성명						성명 					성명 
급여(연봉)				급여(연봉)				급여(일당)
근로형태					근로형태					근로형태	
보너스		                 계약기간					근무일수
월급여를 계산한다		월급여를 계산한다.		월급여를 계산한다     						   

직원
사번
성명
급여
근로형태
월급여를 계산한다


CD 클래스 - 수퍼클래스
관리번호
제목

음악CD 클래스 - 서브클래스
관리번호
제목
아티스트
곡명[]













